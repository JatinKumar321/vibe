"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5547],{4146:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(4700);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},9278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Typescript/User Defined Types/7.2 Solution User defined Types","title":"7.2 Solution User defined Types","description":"1. Interactive Challenge","source":"@site/newdocs/Typescript/7. User Defined Types/7.2 Solution User defined Types.md","sourceDirName":"Typescript/7. User Defined Types","slug":"/Typescript/User Defined Types/7.2 Solution User defined Types","permalink":"/vibe/newdocs/Typescript/User Defined Types/7.2 Solution User defined Types","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/7. User Defined Types/7.2 Solution User defined Types.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"User-Defined Types in TypeScript","permalink":"/vibe/newdocs/Typescript/User Defined Types/7.1 User defined Types in Typescript"},"next":{"title":"TypeScript \u2013 null vs. undefined","permalink":"/vibe/newdocs/Typescript/Null vs Undefined/8.1 Null vs Undefined"}}');var i=t(7968),r=t(4146);const o={},l=void 0,d={},a=[{value:"1. Interactive Challenge",id:"1-interactive-challenge",level:2},{value:"2. Solution &amp; Deep Dive Explanation",id:"2-solution--deep-dive-explanation",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"1-interactive-challenge",children:"1. Interactive Challenge"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Define an enum  ",(0,i.jsx)(n.code,{children:"Role"}),"  for staff roles (Doctor, Nurse, Admin)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create an interface  ",(0,i.jsx)(n.code,{children:"Staff"}),"  with fields for  ",(0,i.jsx)(n.code,{children:"id"}),",  ",(0,i.jsx)(n.code,{children:"name"}),", and  ",(0,i.jsx)(n.code,{children:"role"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create an array of staff members using the interface and enum."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Write a function that prints a summary of all staff, showing their name and role."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-solution--deep-dive-explanation",children:"2. Solution & Deep Dive Explanation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'enum Role { Doctor, Nurse, Admin }\n\ninterface Staff {\n  id: number;\n  name: string;\n  role: Role;\n}\n\nlet staffList: Staff[] = [\n  { id: 1, name: "Dr. Smith", role: Role.Doctor },\n  { id: 2, name: "Nurse Kelly", role: Role.Nurse },\n  { id: 3, name: "Ms. Lee", role: Role.Admin }\n];\n\nfunction printStaffSummary(staffArray: Staff[]): void {\n  for (let staff of staffArray) {\n    console.log(`Name: ${staff.name}, Role: ${Role[staff.role]}`);\n  }\n}\n\nprintStaffSummary(staffList);\n// Output:\n// Name: Dr. Smith, Role: Doctor\n// Name: Nurse Kelly, Role: Nurse\n// Name: Ms. Lee, Role: Admin\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);